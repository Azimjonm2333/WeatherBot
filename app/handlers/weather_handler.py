from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from app.services.weather_service import WeatherService
import logging
from collections import defaultdict

logger = logging.getLogger(__name__)

router = Router()

def escape_city_name(city: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data."""
    return city.replace(' ', '_')

def unescape_city_name(city: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∑–∞–º–µ–Ω—è—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã."""
    return city.replace('_', ' ')

def get_forecast_keyboard(city: str) -> InlineKeyboardMarkup:
    escaped_city = escape_city_name(city)
    callback_data = f"forecast_5_days_{escaped_city}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ 5 –¥–Ω–µ–π", callback_data=callback_data)]
    ])
    return keyboard


class WeatherHandler:
    def __init__(self, router: Router, weather_service: WeatherService):
        self.router = router
        self.weather_service = weather_service
        self.setup_handlers()


    def setup_handlers(self):
        self.router.message.register(self.send_welcome, Command(commands=["start"]))
        self.router.message.register(self.handle_city, F.text)
        self.router.callback_query.register(self.handle_forecast, F.data.startswith("forecast_5_days_"))


    async def send_welcome(self, message: Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø–æ–≥–æ–¥—É."
        )


    async def handle_city(self, message: Message):
        city = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        weather = await self.weather_service.fetch_current_weather(city)
        if weather:
            response = (
                f"üå§ *–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather['city']}*:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather['description'].capitalize()}"
            )
            keyboard = get_forecast_keyboard(weather['city'])
            await message.answer(response, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


    async def handle_forecast(self, callback_query: types.CallbackQuery):
        callback_data = callback_query.data
        try:
            _, _, escaped_city = callback_data.partition("forecast_5_days_")
            city = unescape_city_name(escaped_city)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {e}")
            await callback_query.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞.")
            await callback_query.answer()
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        forecast = await self.weather_service.fetch_forecast_weather(city)
        if forecast:
            forecast_by_day = defaultdict(list)
            for entry in forecast:
                date = entry['datetime'].split(' ')[0]
                forecast_by_day[date].append(entry)

            response = f"üå§ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}:*\n"
            for date, entries in list(forecast_by_day.items())[:5]:
                daily_temps = [e['temperature'] for e in entries]
                daily_descriptions = [e['description'] for e in entries]
                avg_temp = sum(daily_temps) / len(daily_temps)
                most_common_desc = max(set(daily_descriptions), key=daily_descriptions.count)
                response += (
                    f"\nüìÖ *{date}*\n"
                    f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {entries[0]['humidity']}%\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {most_common_desc.capitalize()}\n"
                )
            await callback_query.message.answer(response, parse_mode="Markdown")
        else:
            await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
        await callback_query.answer()
